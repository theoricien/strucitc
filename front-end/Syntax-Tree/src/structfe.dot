// Generated by GNU Bison 3.0.4.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "structfe.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l"]
  0 -> 1 [style=solid label="EXTERN"]
  0 -> 2 [style=solid label="INT"]
  0 -> 3 [style=solid label="VOID"]
  0 -> 4 [style=solid label="STRUCT"]
  0 -> 5 [style=dashed label="declaration"]
  0 -> 6 [style=dashed label="declaration_specifiers"]
  0 -> 7 [style=dashed label="type_specifier"]
  0 -> 8 [style=dashed label="struct_specifier"]
  0 -> 9 [style=dashed label="program"]
  0 -> 10 [style=dashed label="external_declaration"]
  0 -> 11 [style=dashed label="function_definition"]
  1 [label="State 1\n\l 43 declaration_specifiers: EXTERN . type_specifier\l"]
  1 -> 2 [style=solid label="INT"]
  1 -> 3 [style=solid label="VOID"]
  1 -> 4 [style=solid label="STRUCT"]
  1 -> 12 [style=dashed label="type_specifier"]
  1 -> 13 [style=dashed label="struct_specifier"]
  2 [label="State 2\n\l 46 type_specifier: INT .\l"]
  2 -> "2R46" [style=solid]
 "2R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l 45 type_specifier: VOID .\l"]
  3 -> "3R45" [style=solid]
 "3R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l 48 struct_specifier: STRUCT . IDENTIFIER '{' struct_declaration_list '}'\l 49                 | STRUCT . '{' struct_declaration_list '}'\l 50                 | STRUCT . IDENTIFIER\l"]
  4 -> 14 [style=solid label="IDENTIFIER"]
  4 -> 15 [style=solid label="'{'"]
  5 [label="State 5\n\l 87 external_declaration: declaration .\l"]
  5 -> "5R87" [style=solid]
 "5R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l 41 declaration: declaration_specifiers . declarator ';'\l 88 function_definition: declaration_specifiers . declarator compound_statement\l"]
  6 -> 16 [style=solid label="IDENTIFIER"]
  6 -> 17 [style=solid label="'('"]
  6 -> 18 [style=solid label="'*'"]
  6 -> 19 [style=dashed label="declarator"]
  6 -> 20 [style=dashed label="direct_declarator"]
  7 [label="State 7\n\l 44 declaration_specifiers: type_specifier .\l"]
  7 -> "7R44" [style=solid]
 "7R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 42 declaration: struct_specifier . ';'\l 47 type_specifier: struct_specifier .\l"]
  8 -> 21 [style=solid label="';'"]
  8 -> "8R47" [style=solid]
 "8R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  9 [label="State 9\n\l  0 $accept: program . $end\l 85 program: program . external_declaration\l"]
  9 -> 22 [style=solid label="$end"]
  9 -> 1 [style=solid label="EXTERN"]
  9 -> 2 [style=solid label="INT"]
  9 -> 3 [style=solid label="VOID"]
  9 -> 4 [style=solid label="STRUCT"]
  9 -> 5 [style=dashed label="declaration"]
  9 -> 6 [style=dashed label="declaration_specifiers"]
  9 -> 7 [style=dashed label="type_specifier"]
  9 -> 8 [style=dashed label="struct_specifier"]
  9 -> 23 [style=dashed label="external_declaration"]
  9 -> 11 [style=dashed label="function_definition"]
  10 [label="State 10\n\l 84 program: external_declaration .\l"]
  10 -> "10R84" [style=solid]
 "10R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l 86 external_declaration: function_definition .\l"]
  11 -> "11R86" [style=solid]
 "11R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l 43 declaration_specifiers: EXTERN type_specifier .\l"]
  12 -> "12R43" [style=solid]
 "12R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l 47 type_specifier: struct_specifier .\l"]
  13 -> "13R47" [style=solid]
 "13R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l 48 struct_specifier: STRUCT IDENTIFIER . '{' struct_declaration_list '}'\l 50                 | STRUCT IDENTIFIER .\l"]
  14 -> 24 [style=solid label="'{'"]
  14 -> "14R50" [style=solid]
 "14R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l 49 struct_specifier: STRUCT '{' . struct_declaration_list '}'\l"]
  15 -> 2 [style=solid label="INT"]
  15 -> 3 [style=solid label="VOID"]
  15 -> 4 [style=solid label="STRUCT"]
  15 -> 25 [style=dashed label="type_specifier"]
  15 -> 13 [style=dashed label="struct_specifier"]
  15 -> 26 [style=dashed label="struct_declaration_list"]
  15 -> 27 [style=dashed label="struct_declaration"]
  16 [label="State 16\n\l 56 direct_declarator: IDENTIFIER .\l"]
  16 -> "16R56" [style=solid]
 "16R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l 57 direct_declarator: '(' . declarator ')'\l"]
  17 -> 16 [style=solid label="IDENTIFIER"]
  17 -> 17 [style=solid label="'('"]
  17 -> 18 [style=solid label="'*'"]
  17 -> 28 [style=dashed label="declarator"]
  17 -> 20 [style=dashed label="direct_declarator"]
  18 [label="State 18\n\l 54 declarator: '*' . direct_declarator\l"]
  18 -> 16 [style=solid label="IDENTIFIER"]
  18 -> 17 [style=solid label="'('"]
  18 -> 29 [style=dashed label="direct_declarator"]
  19 [label="State 19\n\l 41 declaration: declaration_specifiers declarator . ';'\l 88 function_definition: declaration_specifiers declarator . compound_statement\l"]
  19 -> 30 [style=solid label="';'"]
  19 -> 31 [style=solid label="'{'"]
  19 -> 32 [style=dashed label="compound_statement"]
  20 [label="State 20\n\l 55 declarator: direct_declarator .\l 58 direct_declarator: direct_declarator . '(' parameter_list ')'\l 59                  | direct_declarator . '(' ')'\l"]
  20 -> 33 [style=solid label="'('"]
  20 -> "20R55" [style=solid]
 "20R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l 42 declaration: struct_specifier ';' .\l"]
  21 -> "21R42" [style=solid]
 "21R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  0 $accept: program $end .\l"]
  22 -> "22R0" [style=solid]
 "22R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  23 [label="State 23\n\l 85 program: program external_declaration .\l"]
  23 -> "23R85" [style=solid]
 "23R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l 48 struct_specifier: STRUCT IDENTIFIER '{' . struct_declaration_list '}'\l"]
  24 -> 2 [style=solid label="INT"]
  24 -> 3 [style=solid label="VOID"]
  24 -> 4 [style=solid label="STRUCT"]
  24 -> 25 [style=dashed label="type_specifier"]
  24 -> 13 [style=dashed label="struct_specifier"]
  24 -> 34 [style=dashed label="struct_declaration_list"]
  24 -> 27 [style=dashed label="struct_declaration"]
  25 [label="State 25\n\l 53 struct_declaration: type_specifier . declarator ';'\l"]
  25 -> 16 [style=solid label="IDENTIFIER"]
  25 -> 17 [style=solid label="'('"]
  25 -> 18 [style=solid label="'*'"]
  25 -> 35 [style=dashed label="declarator"]
  25 -> 20 [style=dashed label="direct_declarator"]
  26 [label="State 26\n\l 49 struct_specifier: STRUCT '{' struct_declaration_list . '}'\l 52 struct_declaration_list: struct_declaration_list . struct_declaration\l"]
  26 -> 2 [style=solid label="INT"]
  26 -> 3 [style=solid label="VOID"]
  26 -> 4 [style=solid label="STRUCT"]
  26 -> 36 [style=solid label="'}'"]
  26 -> 25 [style=dashed label="type_specifier"]
  26 -> 13 [style=dashed label="struct_specifier"]
  26 -> 37 [style=dashed label="struct_declaration"]
  27 [label="State 27\n\l 51 struct_declaration_list: struct_declaration .\l"]
  27 -> "27R51" [style=solid]
 "27R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 57 direct_declarator: '(' declarator . ')'\l"]
  28 -> 38 [style=solid label="')'"]
  29 [label="State 29\n\l 54 declarator: '*' direct_declarator .\l 58 direct_declarator: direct_declarator . '(' parameter_list ')'\l 59                  | direct_declarator . '(' ')'\l"]
  29 -> 33 [style=solid label="'('"]
  29 -> "29R54" [style=solid]
 "29R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 41 declaration: declaration_specifiers declarator ';' .\l"]
  30 -> "30R41" [style=solid]
 "30R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 68 compound_statement: '{' . '}'\l 69                   | '{' . statement_list '}'\l 70                   | '{' . declaration_list '}'\l 71                   | '{' . declaration_list statement_list '}'\l"]
  31 -> 39 [style=solid label="IDENTIFIER"]
  31 -> 40 [style=solid label="CONSTANT"]
  31 -> 41 [style=solid label="SIZEOF"]
  31 -> 1 [style=solid label="EXTERN"]
  31 -> 2 [style=solid label="INT"]
  31 -> 3 [style=solid label="VOID"]
  31 -> 4 [style=solid label="STRUCT"]
  31 -> 42 [style=solid label="IF"]
  31 -> 43 [style=solid label="WHILE"]
  31 -> 44 [style=solid label="FOR"]
  31 -> 45 [style=solid label="RETURN"]
  31 -> 46 [style=solid label="'('"]
  31 -> 47 [style=solid label="'&'"]
  31 -> 48 [style=solid label="'*'"]
  31 -> 49 [style=solid label="'-'"]
  31 -> 50 [style=solid label="';'"]
  31 -> 31 [style=solid label="'{'"]
  31 -> 51 [style=solid label="'}'"]
  31 -> 52 [style=dashed label="primary_expression"]
  31 -> 53 [style=dashed label="postfix_expression"]
  31 -> 54 [style=dashed label="unary_expression"]
  31 -> 55 [style=dashed label="unary_operator"]
  31 -> 56 [style=dashed label="multiplicative_expression"]
  31 -> 57 [style=dashed label="additive_expression"]
  31 -> 58 [style=dashed label="relational_expression"]
  31 -> 59 [style=dashed label="equality_expression"]
  31 -> 60 [style=dashed label="logical_and_expression"]
  31 -> 61 [style=dashed label="logical_or_expression"]
  31 -> 62 [style=dashed label="binary_expression"]
  31 -> 63 [style=dashed label="expression"]
  31 -> 64 [style=dashed label="declaration"]
  31 -> 65 [style=dashed label="declaration_specifiers"]
  31 -> 7 [style=dashed label="type_specifier"]
  31 -> 8 [style=dashed label="struct_specifier"]
  31 -> 66 [style=dashed label="statement"]
  31 -> 67 [style=dashed label="compound_statement"]
  31 -> 68 [style=dashed label="declaration_list"]
  31 -> 69 [style=dashed label="statement_list"]
  31 -> 70 [style=dashed label="expression_statement"]
  31 -> 71 [style=dashed label="selection_statement"]
  31 -> 72 [style=dashed label="iteration_statement"]
  31 -> 73 [style=dashed label="jump_statement"]
  32 [label="State 32\n\l 88 function_definition: declaration_specifiers declarator compound_statement .\l"]
  32 -> "32R88" [style=solid]
 "32R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l 58 direct_declarator: direct_declarator '(' . parameter_list ')'\l 59                  | direct_declarator '(' . ')'\l"]
  33 -> 1 [style=solid label="EXTERN"]
  33 -> 2 [style=solid label="INT"]
  33 -> 3 [style=solid label="VOID"]
  33 -> 4 [style=solid label="STRUCT"]
  33 -> 74 [style=solid label="')'"]
  33 -> 75 [style=dashed label="declaration_specifiers"]
  33 -> 7 [style=dashed label="type_specifier"]
  33 -> 13 [style=dashed label="struct_specifier"]
  33 -> 76 [style=dashed label="parameter_list"]
  33 -> 77 [style=dashed label="parameter_declaration"]
  34 [label="State 34\n\l 48 struct_specifier: STRUCT IDENTIFIER '{' struct_declaration_list . '}'\l 52 struct_declaration_list: struct_declaration_list . struct_declaration\l"]
  34 -> 2 [style=solid label="INT"]
  34 -> 3 [style=solid label="VOID"]
  34 -> 4 [style=solid label="STRUCT"]
  34 -> 78 [style=solid label="'}'"]
  34 -> 25 [style=dashed label="type_specifier"]
  34 -> 13 [style=dashed label="struct_specifier"]
  34 -> 37 [style=dashed label="struct_declaration"]
  35 [label="State 35\n\l 53 struct_declaration: type_specifier declarator . ';'\l"]
  35 -> 79 [style=solid label="';'"]
  36 [label="State 36\n\l 49 struct_specifier: STRUCT '{' struct_declaration_list '}' .\l"]
  36 -> "36R49" [style=solid]
 "36R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l 52 struct_declaration_list: struct_declaration_list struct_declaration .\l"]
  37 -> "37R52" [style=solid]
 "37R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 57 direct_declarator: '(' declarator ')' .\l"]
  38 -> "38R57" [style=solid]
 "38R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l  1 primary_expression: IDENTIFIER .\l"]
  39 -> "39R1" [style=solid]
 "39R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l  2 primary_expression: CONSTANT .\l"]
  40 -> "40R2" [style=solid]
 "40R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 13 unary_expression: SIZEOF . '(' type_specifier ')'\l 14                 | SIZEOF . '(' expression ')'\l"]
  41 -> 80 [style=solid label="'('"]
  42 [label="State 42\n\l 78 selection_statement: IF . '(' expression ')' statement\l 79                    | IF . '(' expression ')' statement ELSE statement\l"]
  42 -> 81 [style=solid label="'('"]
  43 [label="State 43\n\l 80 iteration_statement: WHILE . '(' expression ')' statement\l"]
  43 -> 82 [style=solid label="'('"]
  44 [label="State 44\n\l 81 iteration_statement: FOR . '(' expression_statement expression_statement expression ')' statement\l"]
  44 -> 83 [style=solid label="'('"]
  45 [label="State 45\n\l 82 jump_statement: RETURN . ';'\l 83               | RETURN . expression ';'\l"]
  45 -> 39 [style=solid label="IDENTIFIER"]
  45 -> 40 [style=solid label="CONSTANT"]
  45 -> 41 [style=solid label="SIZEOF"]
  45 -> 46 [style=solid label="'('"]
  45 -> 47 [style=solid label="'&'"]
  45 -> 48 [style=solid label="'*'"]
  45 -> 49 [style=solid label="'-'"]
  45 -> 84 [style=solid label="';'"]
  45 -> 52 [style=dashed label="primary_expression"]
  45 -> 53 [style=dashed label="postfix_expression"]
  45 -> 54 [style=dashed label="unary_expression"]
  45 -> 55 [style=dashed label="unary_operator"]
  45 -> 56 [style=dashed label="multiplicative_expression"]
  45 -> 57 [style=dashed label="additive_expression"]
  45 -> 58 [style=dashed label="relational_expression"]
  45 -> 59 [style=dashed label="equality_expression"]
  45 -> 60 [style=dashed label="logical_and_expression"]
  45 -> 61 [style=dashed label="logical_or_expression"]
  45 -> 62 [style=dashed label="binary_expression"]
  45 -> 85 [style=dashed label="expression"]
  46 [label="State 46\n\l  3 primary_expression: '(' . expression ')'\l"]
  46 -> 39 [style=solid label="IDENTIFIER"]
  46 -> 40 [style=solid label="CONSTANT"]
  46 -> 41 [style=solid label="SIZEOF"]
  46 -> 46 [style=solid label="'('"]
  46 -> 47 [style=solid label="'&'"]
  46 -> 48 [style=solid label="'*'"]
  46 -> 49 [style=solid label="'-'"]
  46 -> 52 [style=dashed label="primary_expression"]
  46 -> 53 [style=dashed label="postfix_expression"]
  46 -> 54 [style=dashed label="unary_expression"]
  46 -> 55 [style=dashed label="unary_operator"]
  46 -> 56 [style=dashed label="multiplicative_expression"]
  46 -> 57 [style=dashed label="additive_expression"]
  46 -> 58 [style=dashed label="relational_expression"]
  46 -> 59 [style=dashed label="equality_expression"]
  46 -> 60 [style=dashed label="logical_and_expression"]
  46 -> 61 [style=dashed label="logical_or_expression"]
  46 -> 62 [style=dashed label="binary_expression"]
  46 -> 86 [style=dashed label="expression"]
  47 [label="State 47\n\l 15 unary_operator: '&' .\l"]
  47 -> "47R15" [style=solid]
 "47R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l 16 unary_operator: '*' .\l"]
  48 -> "48R16" [style=solid]
 "48R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l 17 unary_operator: '-' .\l"]
  49 -> "49R17" [style=solid]
 "49R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l 76 expression_statement: ';' .\l"]
  50 -> "50R76" [style=solid]
 "50R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l 68 compound_statement: '{' '}' .\l"]
  51 -> "51R68" [style=solid]
 "51R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l  4 postfix_expression: primary_expression .\l"]
  52 -> "52R4" [style=solid]
 "52R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l  5 postfix_expression: postfix_expression . '(' ')'\l  6                   | postfix_expression . '(' argument_expression_list ')'\l  7                   | postfix_expression . '.' IDENTIFIER\l  8                   | postfix_expression . PTR_OP IDENTIFIER\l 11 unary_expression: postfix_expression .\l"]
  53 -> 87 [style=solid label="PTR_OP"]
  53 -> 88 [style=solid label="'('"]
  53 -> 89 [style=solid label="'.'"]
  53 -> "53R11" [style=solid]
 "53R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l 18 multiplicative_expression: unary_expression .\l 39 expression: unary_expression . '=' expression\l"]
  54 -> 90 [style=solid label="'='"]
  54 -> "54R18" [style=solid]
 "54R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 12 unary_expression: unary_operator . unary_expression\l"]
  55 -> 39 [style=solid label="IDENTIFIER"]
  55 -> 40 [style=solid label="CONSTANT"]
  55 -> 41 [style=solid label="SIZEOF"]
  55 -> 46 [style=solid label="'('"]
  55 -> 47 [style=solid label="'&'"]
  55 -> 48 [style=solid label="'*'"]
  55 -> 49 [style=solid label="'-'"]
  55 -> 52 [style=dashed label="primary_expression"]
  55 -> 53 [style=dashed label="postfix_expression"]
  55 -> 91 [style=dashed label="unary_expression"]
  55 -> 55 [style=dashed label="unary_operator"]
  56 [label="State 56\n\l 19 multiplicative_expression: multiplicative_expression . '*' unary_expression\l 20                          | multiplicative_expression . '/' unary_expression\l 21 additive_expression: multiplicative_expression .\l"]
  56 -> 92 [style=solid label="'*'"]
  56 -> 93 [style=solid label="'/'"]
  56 -> "56R21" [style=solid]
 "56R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 22 additive_expression: additive_expression . '+' multiplicative_expression\l 23                    | additive_expression . '-' multiplicative_expression\l 24 relational_expression: additive_expression .\l"]
  57 -> 94 [style=solid label="'-'"]
  57 -> 95 [style=solid label="'+'"]
  57 -> "57R24" [style=solid]
 "57R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 25 relational_expression: relational_expression . L_OP additive_expression\l 26                      | relational_expression . G_OP additive_expression\l 27                      | relational_expression . LE_OP additive_expression\l 28                      | relational_expression . GE_OP additive_expression\l 29 equality_expression: relational_expression .\l"]
  58 -> 96 [style=solid label="LE_OP"]
  58 -> 97 [style=solid label="GE_OP"]
  58 -> 98 [style=solid label="L_OP"]
  58 -> 99 [style=solid label="G_OP"]
  58 -> "58R29" [style=solid]
 "58R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 30 equality_expression: equality_expression . EQ_OP relational_expression\l 31                    | equality_expression . NE_OP relational_expression\l 32 logical_and_expression: equality_expression .\l"]
  59 -> 100 [style=solid label="EQ_OP"]
  59 -> 101 [style=solid label="NE_OP"]
  59 -> "59R32" [style=solid]
 "59R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 33 logical_and_expression: logical_and_expression . AND_OP equality_expression\l 34 logical_or_expression: logical_and_expression .\l"]
  60 -> 102 [style=solid label="AND_OP"]
  60 -> "60R34" [style=solid]
 "60R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 35 logical_or_expression: logical_or_expression . OR_OP logical_and_expression\l 36 binary_expression: logical_or_expression . RB_OP logical_or_expression\l 37                  | logical_or_expression . LB_OP logical_or_expression\l 38 expression: logical_or_expression .\l"]
  61 -> 103 [style=solid label="RB_OP"]
  61 -> 104 [style=solid label="LB_OP"]
  61 -> 105 [style=solid label="OR_OP"]
  61 -> "61R38" [style=solid]
 "61R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 40 expression: binary_expression .\l"]
  62 -> "62R40" [style=solid]
 "62R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 77 expression_statement: expression . ';'\l"]
  63 -> 106 [style=solid label="';'"]
  64 [label="State 64\n\l 72 declaration_list: declaration .\l"]
  64 -> "64R72" [style=solid]
 "64R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l 41 declaration: declaration_specifiers . declarator ';'\l"]
  65 -> 16 [style=solid label="IDENTIFIER"]
  65 -> 17 [style=solid label="'('"]
  65 -> 18 [style=solid label="'*'"]
  65 -> 107 [style=dashed label="declarator"]
  65 -> 20 [style=dashed label="direct_declarator"]
  66 [label="State 66\n\l 74 statement_list: statement .\l"]
  66 -> "66R74" [style=solid]
 "66R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 63 statement: compound_statement .\l"]
  67 -> "67R63" [style=solid]
 "67R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l 70 compound_statement: '{' declaration_list . '}'\l 71                   | '{' declaration_list . statement_list '}'\l 73 declaration_list: declaration_list . declaration\l"]
  68 -> 39 [style=solid label="IDENTIFIER"]
  68 -> 40 [style=solid label="CONSTANT"]
  68 -> 41 [style=solid label="SIZEOF"]
  68 -> 1 [style=solid label="EXTERN"]
  68 -> 2 [style=solid label="INT"]
  68 -> 3 [style=solid label="VOID"]
  68 -> 4 [style=solid label="STRUCT"]
  68 -> 42 [style=solid label="IF"]
  68 -> 43 [style=solid label="WHILE"]
  68 -> 44 [style=solid label="FOR"]
  68 -> 45 [style=solid label="RETURN"]
  68 -> 46 [style=solid label="'('"]
  68 -> 47 [style=solid label="'&'"]
  68 -> 48 [style=solid label="'*'"]
  68 -> 49 [style=solid label="'-'"]
  68 -> 50 [style=solid label="';'"]
  68 -> 31 [style=solid label="'{'"]
  68 -> 108 [style=solid label="'}'"]
  68 -> 52 [style=dashed label="primary_expression"]
  68 -> 53 [style=dashed label="postfix_expression"]
  68 -> 54 [style=dashed label="unary_expression"]
  68 -> 55 [style=dashed label="unary_operator"]
  68 -> 56 [style=dashed label="multiplicative_expression"]
  68 -> 57 [style=dashed label="additive_expression"]
  68 -> 58 [style=dashed label="relational_expression"]
  68 -> 59 [style=dashed label="equality_expression"]
  68 -> 60 [style=dashed label="logical_and_expression"]
  68 -> 61 [style=dashed label="logical_or_expression"]
  68 -> 62 [style=dashed label="binary_expression"]
  68 -> 63 [style=dashed label="expression"]
  68 -> 109 [style=dashed label="declaration"]
  68 -> 65 [style=dashed label="declaration_specifiers"]
  68 -> 7 [style=dashed label="type_specifier"]
  68 -> 8 [style=dashed label="struct_specifier"]
  68 -> 66 [style=dashed label="statement"]
  68 -> 67 [style=dashed label="compound_statement"]
  68 -> 110 [style=dashed label="statement_list"]
  68 -> 70 [style=dashed label="expression_statement"]
  68 -> 71 [style=dashed label="selection_statement"]
  68 -> 72 [style=dashed label="iteration_statement"]
  68 -> 73 [style=dashed label="jump_statement"]
  69 [label="State 69\n\l 69 compound_statement: '{' statement_list . '}'\l 75 statement_list: statement_list . statement\l"]
  69 -> 39 [style=solid label="IDENTIFIER"]
  69 -> 40 [style=solid label="CONSTANT"]
  69 -> 41 [style=solid label="SIZEOF"]
  69 -> 42 [style=solid label="IF"]
  69 -> 43 [style=solid label="WHILE"]
  69 -> 44 [style=solid label="FOR"]
  69 -> 45 [style=solid label="RETURN"]
  69 -> 46 [style=solid label="'('"]
  69 -> 47 [style=solid label="'&'"]
  69 -> 48 [style=solid label="'*'"]
  69 -> 49 [style=solid label="'-'"]
  69 -> 50 [style=solid label="';'"]
  69 -> 31 [style=solid label="'{'"]
  69 -> 111 [style=solid label="'}'"]
  69 -> 52 [style=dashed label="primary_expression"]
  69 -> 53 [style=dashed label="postfix_expression"]
  69 -> 54 [style=dashed label="unary_expression"]
  69 -> 55 [style=dashed label="unary_operator"]
  69 -> 56 [style=dashed label="multiplicative_expression"]
  69 -> 57 [style=dashed label="additive_expression"]
  69 -> 58 [style=dashed label="relational_expression"]
  69 -> 59 [style=dashed label="equality_expression"]
  69 -> 60 [style=dashed label="logical_and_expression"]
  69 -> 61 [style=dashed label="logical_or_expression"]
  69 -> 62 [style=dashed label="binary_expression"]
  69 -> 63 [style=dashed label="expression"]
  69 -> 112 [style=dashed label="statement"]
  69 -> 67 [style=dashed label="compound_statement"]
  69 -> 70 [style=dashed label="expression_statement"]
  69 -> 71 [style=dashed label="selection_statement"]
  69 -> 72 [style=dashed label="iteration_statement"]
  69 -> 73 [style=dashed label="jump_statement"]
  70 [label="State 70\n\l 64 statement: expression_statement .\l"]
  70 -> "70R64" [style=solid]
 "70R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l 65 statement: selection_statement .\l"]
  71 -> "71R65" [style=solid]
 "71R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l 66 statement: iteration_statement .\l"]
  72 -> "72R66" [style=solid]
 "72R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l 67 statement: jump_statement .\l"]
  73 -> "73R67" [style=solid]
 "73R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l 59 direct_declarator: direct_declarator '(' ')' .\l"]
  74 -> "74R59" [style=solid]
 "74R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l 62 parameter_declaration: declaration_specifiers . declarator\l"]
  75 -> 16 [style=solid label="IDENTIFIER"]
  75 -> 17 [style=solid label="'('"]
  75 -> 18 [style=solid label="'*'"]
  75 -> 113 [style=dashed label="declarator"]
  75 -> 20 [style=dashed label="direct_declarator"]
  76 [label="State 76\n\l 58 direct_declarator: direct_declarator '(' parameter_list . ')'\l 61 parameter_list: parameter_list . ',' parameter_declaration\l"]
  76 -> 114 [style=solid label="')'"]
  76 -> 115 [style=solid label="','"]
  77 [label="State 77\n\l 60 parameter_list: parameter_declaration .\l"]
  77 -> "77R60" [style=solid]
 "77R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l 48 struct_specifier: STRUCT IDENTIFIER '{' struct_declaration_list '}' .\l"]
  78 -> "78R48" [style=solid]
 "78R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l 53 struct_declaration: type_specifier declarator ';' .\l"]
  79 -> "79R53" [style=solid]
 "79R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l 13 unary_expression: SIZEOF '(' . type_specifier ')'\l 14                 | SIZEOF '(' . expression ')'\l"]
  80 -> 39 [style=solid label="IDENTIFIER"]
  80 -> 40 [style=solid label="CONSTANT"]
  80 -> 41 [style=solid label="SIZEOF"]
  80 -> 2 [style=solid label="INT"]
  80 -> 3 [style=solid label="VOID"]
  80 -> 4 [style=solid label="STRUCT"]
  80 -> 46 [style=solid label="'('"]
  80 -> 47 [style=solid label="'&'"]
  80 -> 48 [style=solid label="'*'"]
  80 -> 49 [style=solid label="'-'"]
  80 -> 52 [style=dashed label="primary_expression"]
  80 -> 53 [style=dashed label="postfix_expression"]
  80 -> 54 [style=dashed label="unary_expression"]
  80 -> 55 [style=dashed label="unary_operator"]
  80 -> 56 [style=dashed label="multiplicative_expression"]
  80 -> 57 [style=dashed label="additive_expression"]
  80 -> 58 [style=dashed label="relational_expression"]
  80 -> 59 [style=dashed label="equality_expression"]
  80 -> 60 [style=dashed label="logical_and_expression"]
  80 -> 61 [style=dashed label="logical_or_expression"]
  80 -> 62 [style=dashed label="binary_expression"]
  80 -> 116 [style=dashed label="expression"]
  80 -> 117 [style=dashed label="type_specifier"]
  80 -> 13 [style=dashed label="struct_specifier"]
  81 [label="State 81\n\l 78 selection_statement: IF '(' . expression ')' statement\l 79                    | IF '(' . expression ')' statement ELSE statement\l"]
  81 -> 39 [style=solid label="IDENTIFIER"]
  81 -> 40 [style=solid label="CONSTANT"]
  81 -> 41 [style=solid label="SIZEOF"]
  81 -> 46 [style=solid label="'('"]
  81 -> 47 [style=solid label="'&'"]
  81 -> 48 [style=solid label="'*'"]
  81 -> 49 [style=solid label="'-'"]
  81 -> 52 [style=dashed label="primary_expression"]
  81 -> 53 [style=dashed label="postfix_expression"]
  81 -> 54 [style=dashed label="unary_expression"]
  81 -> 55 [style=dashed label="unary_operator"]
  81 -> 56 [style=dashed label="multiplicative_expression"]
  81 -> 57 [style=dashed label="additive_expression"]
  81 -> 58 [style=dashed label="relational_expression"]
  81 -> 59 [style=dashed label="equality_expression"]
  81 -> 60 [style=dashed label="logical_and_expression"]
  81 -> 61 [style=dashed label="logical_or_expression"]
  81 -> 62 [style=dashed label="binary_expression"]
  81 -> 118 [style=dashed label="expression"]
  82 [label="State 82\n\l 80 iteration_statement: WHILE '(' . expression ')' statement\l"]
  82 -> 39 [style=solid label="IDENTIFIER"]
  82 -> 40 [style=solid label="CONSTANT"]
  82 -> 41 [style=solid label="SIZEOF"]
  82 -> 46 [style=solid label="'('"]
  82 -> 47 [style=solid label="'&'"]
  82 -> 48 [style=solid label="'*'"]
  82 -> 49 [style=solid label="'-'"]
  82 -> 52 [style=dashed label="primary_expression"]
  82 -> 53 [style=dashed label="postfix_expression"]
  82 -> 54 [style=dashed label="unary_expression"]
  82 -> 55 [style=dashed label="unary_operator"]
  82 -> 56 [style=dashed label="multiplicative_expression"]
  82 -> 57 [style=dashed label="additive_expression"]
  82 -> 58 [style=dashed label="relational_expression"]
  82 -> 59 [style=dashed label="equality_expression"]
  82 -> 60 [style=dashed label="logical_and_expression"]
  82 -> 61 [style=dashed label="logical_or_expression"]
  82 -> 62 [style=dashed label="binary_expression"]
  82 -> 119 [style=dashed label="expression"]
  83 [label="State 83\n\l 81 iteration_statement: FOR '(' . expression_statement expression_statement expression ')' statement\l"]
  83 -> 39 [style=solid label="IDENTIFIER"]
  83 -> 40 [style=solid label="CONSTANT"]
  83 -> 41 [style=solid label="SIZEOF"]
  83 -> 46 [style=solid label="'('"]
  83 -> 47 [style=solid label="'&'"]
  83 -> 48 [style=solid label="'*'"]
  83 -> 49 [style=solid label="'-'"]
  83 -> 50 [style=solid label="';'"]
  83 -> 52 [style=dashed label="primary_expression"]
  83 -> 53 [style=dashed label="postfix_expression"]
  83 -> 54 [style=dashed label="unary_expression"]
  83 -> 55 [style=dashed label="unary_operator"]
  83 -> 56 [style=dashed label="multiplicative_expression"]
  83 -> 57 [style=dashed label="additive_expression"]
  83 -> 58 [style=dashed label="relational_expression"]
  83 -> 59 [style=dashed label="equality_expression"]
  83 -> 60 [style=dashed label="logical_and_expression"]
  83 -> 61 [style=dashed label="logical_or_expression"]
  83 -> 62 [style=dashed label="binary_expression"]
  83 -> 63 [style=dashed label="expression"]
  83 -> 120 [style=dashed label="expression_statement"]
  84 [label="State 84\n\l 82 jump_statement: RETURN ';' .\l"]
  84 -> "84R82" [style=solid]
 "84R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 83 jump_statement: RETURN expression . ';'\l"]
  85 -> 121 [style=solid label="';'"]
  86 [label="State 86\n\l  3 primary_expression: '(' expression . ')'\l"]
  86 -> 122 [style=solid label="')'"]
  87 [label="State 87\n\l  8 postfix_expression: postfix_expression PTR_OP . IDENTIFIER\l"]
  87 -> 123 [style=solid label="IDENTIFIER"]
  88 [label="State 88\n\l  5 postfix_expression: postfix_expression '(' . ')'\l  6                   | postfix_expression '(' . argument_expression_list ')'\l"]
  88 -> 39 [style=solid label="IDENTIFIER"]
  88 -> 40 [style=solid label="CONSTANT"]
  88 -> 41 [style=solid label="SIZEOF"]
  88 -> 46 [style=solid label="'('"]
  88 -> 124 [style=solid label="')'"]
  88 -> 47 [style=solid label="'&'"]
  88 -> 48 [style=solid label="'*'"]
  88 -> 49 [style=solid label="'-'"]
  88 -> 52 [style=dashed label="primary_expression"]
  88 -> 53 [style=dashed label="postfix_expression"]
  88 -> 125 [style=dashed label="argument_expression_list"]
  88 -> 54 [style=dashed label="unary_expression"]
  88 -> 55 [style=dashed label="unary_operator"]
  88 -> 56 [style=dashed label="multiplicative_expression"]
  88 -> 57 [style=dashed label="additive_expression"]
  88 -> 58 [style=dashed label="relational_expression"]
  88 -> 59 [style=dashed label="equality_expression"]
  88 -> 60 [style=dashed label="logical_and_expression"]
  88 -> 61 [style=dashed label="logical_or_expression"]
  88 -> 62 [style=dashed label="binary_expression"]
  88 -> 126 [style=dashed label="expression"]
  89 [label="State 89\n\l  7 postfix_expression: postfix_expression '.' . IDENTIFIER\l"]
  89 -> 127 [style=solid label="IDENTIFIER"]
  90 [label="State 90\n\l 39 expression: unary_expression '=' . expression\l"]
  90 -> 39 [style=solid label="IDENTIFIER"]
  90 -> 40 [style=solid label="CONSTANT"]
  90 -> 41 [style=solid label="SIZEOF"]
  90 -> 46 [style=solid label="'('"]
  90 -> 47 [style=solid label="'&'"]
  90 -> 48 [style=solid label="'*'"]
  90 -> 49 [style=solid label="'-'"]
  90 -> 52 [style=dashed label="primary_expression"]
  90 -> 53 [style=dashed label="postfix_expression"]
  90 -> 54 [style=dashed label="unary_expression"]
  90 -> 55 [style=dashed label="unary_operator"]
  90 -> 56 [style=dashed label="multiplicative_expression"]
  90 -> 57 [style=dashed label="additive_expression"]
  90 -> 58 [style=dashed label="relational_expression"]
  90 -> 59 [style=dashed label="equality_expression"]
  90 -> 60 [style=dashed label="logical_and_expression"]
  90 -> 61 [style=dashed label="logical_or_expression"]
  90 -> 62 [style=dashed label="binary_expression"]
  90 -> 128 [style=dashed label="expression"]
  91 [label="State 91\n\l 12 unary_expression: unary_operator unary_expression .\l"]
  91 -> "91R12" [style=solid]
 "91R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l 19 multiplicative_expression: multiplicative_expression '*' . unary_expression\l"]
  92 -> 39 [style=solid label="IDENTIFIER"]
  92 -> 40 [style=solid label="CONSTANT"]
  92 -> 41 [style=solid label="SIZEOF"]
  92 -> 46 [style=solid label="'('"]
  92 -> 47 [style=solid label="'&'"]
  92 -> 48 [style=solid label="'*'"]
  92 -> 49 [style=solid label="'-'"]
  92 -> 52 [style=dashed label="primary_expression"]
  92 -> 53 [style=dashed label="postfix_expression"]
  92 -> 129 [style=dashed label="unary_expression"]
  92 -> 55 [style=dashed label="unary_operator"]
  93 [label="State 93\n\l 20 multiplicative_expression: multiplicative_expression '/' . unary_expression\l"]
  93 -> 39 [style=solid label="IDENTIFIER"]
  93 -> 40 [style=solid label="CONSTANT"]
  93 -> 41 [style=solid label="SIZEOF"]
  93 -> 46 [style=solid label="'('"]
  93 -> 47 [style=solid label="'&'"]
  93 -> 48 [style=solid label="'*'"]
  93 -> 49 [style=solid label="'-'"]
  93 -> 52 [style=dashed label="primary_expression"]
  93 -> 53 [style=dashed label="postfix_expression"]
  93 -> 130 [style=dashed label="unary_expression"]
  93 -> 55 [style=dashed label="unary_operator"]
  94 [label="State 94\n\l 23 additive_expression: additive_expression '-' . multiplicative_expression\l"]
  94 -> 39 [style=solid label="IDENTIFIER"]
  94 -> 40 [style=solid label="CONSTANT"]
  94 -> 41 [style=solid label="SIZEOF"]
  94 -> 46 [style=solid label="'('"]
  94 -> 47 [style=solid label="'&'"]
  94 -> 48 [style=solid label="'*'"]
  94 -> 49 [style=solid label="'-'"]
  94 -> 52 [style=dashed label="primary_expression"]
  94 -> 53 [style=dashed label="postfix_expression"]
  94 -> 131 [style=dashed label="unary_expression"]
  94 -> 55 [style=dashed label="unary_operator"]
  94 -> 132 [style=dashed label="multiplicative_expression"]
  95 [label="State 95\n\l 22 additive_expression: additive_expression '+' . multiplicative_expression\l"]
  95 -> 39 [style=solid label="IDENTIFIER"]
  95 -> 40 [style=solid label="CONSTANT"]
  95 -> 41 [style=solid label="SIZEOF"]
  95 -> 46 [style=solid label="'('"]
  95 -> 47 [style=solid label="'&'"]
  95 -> 48 [style=solid label="'*'"]
  95 -> 49 [style=solid label="'-'"]
  95 -> 52 [style=dashed label="primary_expression"]
  95 -> 53 [style=dashed label="postfix_expression"]
  95 -> 131 [style=dashed label="unary_expression"]
  95 -> 55 [style=dashed label="unary_operator"]
  95 -> 133 [style=dashed label="multiplicative_expression"]
  96 [label="State 96\n\l 27 relational_expression: relational_expression LE_OP . additive_expression\l"]
  96 -> 39 [style=solid label="IDENTIFIER"]
  96 -> 40 [style=solid label="CONSTANT"]
  96 -> 41 [style=solid label="SIZEOF"]
  96 -> 46 [style=solid label="'('"]
  96 -> 47 [style=solid label="'&'"]
  96 -> 48 [style=solid label="'*'"]
  96 -> 49 [style=solid label="'-'"]
  96 -> 52 [style=dashed label="primary_expression"]
  96 -> 53 [style=dashed label="postfix_expression"]
  96 -> 131 [style=dashed label="unary_expression"]
  96 -> 55 [style=dashed label="unary_operator"]
  96 -> 56 [style=dashed label="multiplicative_expression"]
  96 -> 134 [style=dashed label="additive_expression"]
  97 [label="State 97\n\l 28 relational_expression: relational_expression GE_OP . additive_expression\l"]
  97 -> 39 [style=solid label="IDENTIFIER"]
  97 -> 40 [style=solid label="CONSTANT"]
  97 -> 41 [style=solid label="SIZEOF"]
  97 -> 46 [style=solid label="'('"]
  97 -> 47 [style=solid label="'&'"]
  97 -> 48 [style=solid label="'*'"]
  97 -> 49 [style=solid label="'-'"]
  97 -> 52 [style=dashed label="primary_expression"]
  97 -> 53 [style=dashed label="postfix_expression"]
  97 -> 131 [style=dashed label="unary_expression"]
  97 -> 55 [style=dashed label="unary_operator"]
  97 -> 56 [style=dashed label="multiplicative_expression"]
  97 -> 135 [style=dashed label="additive_expression"]
  98 [label="State 98\n\l 25 relational_expression: relational_expression L_OP . additive_expression\l"]
  98 -> 39 [style=solid label="IDENTIFIER"]
  98 -> 40 [style=solid label="CONSTANT"]
  98 -> 41 [style=solid label="SIZEOF"]
  98 -> 46 [style=solid label="'('"]
  98 -> 47 [style=solid label="'&'"]
  98 -> 48 [style=solid label="'*'"]
  98 -> 49 [style=solid label="'-'"]
  98 -> 52 [style=dashed label="primary_expression"]
  98 -> 53 [style=dashed label="postfix_expression"]
  98 -> 131 [style=dashed label="unary_expression"]
  98 -> 55 [style=dashed label="unary_operator"]
  98 -> 56 [style=dashed label="multiplicative_expression"]
  98 -> 136 [style=dashed label="additive_expression"]
  99 [label="State 99\n\l 26 relational_expression: relational_expression G_OP . additive_expression\l"]
  99 -> 39 [style=solid label="IDENTIFIER"]
  99 -> 40 [style=solid label="CONSTANT"]
  99 -> 41 [style=solid label="SIZEOF"]
  99 -> 46 [style=solid label="'('"]
  99 -> 47 [style=solid label="'&'"]
  99 -> 48 [style=solid label="'*'"]
  99 -> 49 [style=solid label="'-'"]
  99 -> 52 [style=dashed label="primary_expression"]
  99 -> 53 [style=dashed label="postfix_expression"]
  99 -> 131 [style=dashed label="unary_expression"]
  99 -> 55 [style=dashed label="unary_operator"]
  99 -> 56 [style=dashed label="multiplicative_expression"]
  99 -> 137 [style=dashed label="additive_expression"]
  100 [label="State 100\n\l 30 equality_expression: equality_expression EQ_OP . relational_expression\l"]
  100 -> 39 [style=solid label="IDENTIFIER"]
  100 -> 40 [style=solid label="CONSTANT"]
  100 -> 41 [style=solid label="SIZEOF"]
  100 -> 46 [style=solid label="'('"]
  100 -> 47 [style=solid label="'&'"]
  100 -> 48 [style=solid label="'*'"]
  100 -> 49 [style=solid label="'-'"]
  100 -> 52 [style=dashed label="primary_expression"]
  100 -> 53 [style=dashed label="postfix_expression"]
  100 -> 131 [style=dashed label="unary_expression"]
  100 -> 55 [style=dashed label="unary_operator"]
  100 -> 56 [style=dashed label="multiplicative_expression"]
  100 -> 57 [style=dashed label="additive_expression"]
  100 -> 138 [style=dashed label="relational_expression"]
  101 [label="State 101\n\l 31 equality_expression: equality_expression NE_OP . relational_expression\l"]
  101 -> 39 [style=solid label="IDENTIFIER"]
  101 -> 40 [style=solid label="CONSTANT"]
  101 -> 41 [style=solid label="SIZEOF"]
  101 -> 46 [style=solid label="'('"]
  101 -> 47 [style=solid label="'&'"]
  101 -> 48 [style=solid label="'*'"]
  101 -> 49 [style=solid label="'-'"]
  101 -> 52 [style=dashed label="primary_expression"]
  101 -> 53 [style=dashed label="postfix_expression"]
  101 -> 131 [style=dashed label="unary_expression"]
  101 -> 55 [style=dashed label="unary_operator"]
  101 -> 56 [style=dashed label="multiplicative_expression"]
  101 -> 57 [style=dashed label="additive_expression"]
  101 -> 139 [style=dashed label="relational_expression"]
  102 [label="State 102\n\l 33 logical_and_expression: logical_and_expression AND_OP . equality_expression\l"]
  102 -> 39 [style=solid label="IDENTIFIER"]
  102 -> 40 [style=solid label="CONSTANT"]
  102 -> 41 [style=solid label="SIZEOF"]
  102 -> 46 [style=solid label="'('"]
  102 -> 47 [style=solid label="'&'"]
  102 -> 48 [style=solid label="'*'"]
  102 -> 49 [style=solid label="'-'"]
  102 -> 52 [style=dashed label="primary_expression"]
  102 -> 53 [style=dashed label="postfix_expression"]
  102 -> 131 [style=dashed label="unary_expression"]
  102 -> 55 [style=dashed label="unary_operator"]
  102 -> 56 [style=dashed label="multiplicative_expression"]
  102 -> 57 [style=dashed label="additive_expression"]
  102 -> 58 [style=dashed label="relational_expression"]
  102 -> 140 [style=dashed label="equality_expression"]
  103 [label="State 103\n\l 36 binary_expression: logical_or_expression RB_OP . logical_or_expression\l"]
  103 -> 39 [style=solid label="IDENTIFIER"]
  103 -> 40 [style=solid label="CONSTANT"]
  103 -> 41 [style=solid label="SIZEOF"]
  103 -> 46 [style=solid label="'('"]
  103 -> 47 [style=solid label="'&'"]
  103 -> 48 [style=solid label="'*'"]
  103 -> 49 [style=solid label="'-'"]
  103 -> 52 [style=dashed label="primary_expression"]
  103 -> 53 [style=dashed label="postfix_expression"]
  103 -> 131 [style=dashed label="unary_expression"]
  103 -> 55 [style=dashed label="unary_operator"]
  103 -> 56 [style=dashed label="multiplicative_expression"]
  103 -> 57 [style=dashed label="additive_expression"]
  103 -> 58 [style=dashed label="relational_expression"]
  103 -> 59 [style=dashed label="equality_expression"]
  103 -> 60 [style=dashed label="logical_and_expression"]
  103 -> 141 [style=dashed label="logical_or_expression"]
  104 [label="State 104\n\l 37 binary_expression: logical_or_expression LB_OP . logical_or_expression\l"]
  104 -> 39 [style=solid label="IDENTIFIER"]
  104 -> 40 [style=solid label="CONSTANT"]
  104 -> 41 [style=solid label="SIZEOF"]
  104 -> 46 [style=solid label="'('"]
  104 -> 47 [style=solid label="'&'"]
  104 -> 48 [style=solid label="'*'"]
  104 -> 49 [style=solid label="'-'"]
  104 -> 52 [style=dashed label="primary_expression"]
  104 -> 53 [style=dashed label="postfix_expression"]
  104 -> 131 [style=dashed label="unary_expression"]
  104 -> 55 [style=dashed label="unary_operator"]
  104 -> 56 [style=dashed label="multiplicative_expression"]
  104 -> 57 [style=dashed label="additive_expression"]
  104 -> 58 [style=dashed label="relational_expression"]
  104 -> 59 [style=dashed label="equality_expression"]
  104 -> 60 [style=dashed label="logical_and_expression"]
  104 -> 142 [style=dashed label="logical_or_expression"]
  105 [label="State 105\n\l 35 logical_or_expression: logical_or_expression OR_OP . logical_and_expression\l"]
  105 -> 39 [style=solid label="IDENTIFIER"]
  105 -> 40 [style=solid label="CONSTANT"]
  105 -> 41 [style=solid label="SIZEOF"]
  105 -> 46 [style=solid label="'('"]
  105 -> 47 [style=solid label="'&'"]
  105 -> 48 [style=solid label="'*'"]
  105 -> 49 [style=solid label="'-'"]
  105 -> 52 [style=dashed label="primary_expression"]
  105 -> 53 [style=dashed label="postfix_expression"]
  105 -> 131 [style=dashed label="unary_expression"]
  105 -> 55 [style=dashed label="unary_operator"]
  105 -> 56 [style=dashed label="multiplicative_expression"]
  105 -> 57 [style=dashed label="additive_expression"]
  105 -> 58 [style=dashed label="relational_expression"]
  105 -> 59 [style=dashed label="equality_expression"]
  105 -> 143 [style=dashed label="logical_and_expression"]
  106 [label="State 106\n\l 77 expression_statement: expression ';' .\l"]
  106 -> "106R77" [style=solid]
 "106R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l 41 declaration: declaration_specifiers declarator . ';'\l"]
  107 -> 30 [style=solid label="';'"]
  108 [label="State 108\n\l 70 compound_statement: '{' declaration_list '}' .\l"]
  108 -> "108R70" [style=solid]
 "108R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 73 declaration_list: declaration_list declaration .\l"]
  109 -> "109R73" [style=solid]
 "109R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 71 compound_statement: '{' declaration_list statement_list . '}'\l 75 statement_list: statement_list . statement\l"]
  110 -> 39 [style=solid label="IDENTIFIER"]
  110 -> 40 [style=solid label="CONSTANT"]
  110 -> 41 [style=solid label="SIZEOF"]
  110 -> 42 [style=solid label="IF"]
  110 -> 43 [style=solid label="WHILE"]
  110 -> 44 [style=solid label="FOR"]
  110 -> 45 [style=solid label="RETURN"]
  110 -> 46 [style=solid label="'('"]
  110 -> 47 [style=solid label="'&'"]
  110 -> 48 [style=solid label="'*'"]
  110 -> 49 [style=solid label="'-'"]
  110 -> 50 [style=solid label="';'"]
  110 -> 31 [style=solid label="'{'"]
  110 -> 144 [style=solid label="'}'"]
  110 -> 52 [style=dashed label="primary_expression"]
  110 -> 53 [style=dashed label="postfix_expression"]
  110 -> 54 [style=dashed label="unary_expression"]
  110 -> 55 [style=dashed label="unary_operator"]
  110 -> 56 [style=dashed label="multiplicative_expression"]
  110 -> 57 [style=dashed label="additive_expression"]
  110 -> 58 [style=dashed label="relational_expression"]
  110 -> 59 [style=dashed label="equality_expression"]
  110 -> 60 [style=dashed label="logical_and_expression"]
  110 -> 61 [style=dashed label="logical_or_expression"]
  110 -> 62 [style=dashed label="binary_expression"]
  110 -> 63 [style=dashed label="expression"]
  110 -> 112 [style=dashed label="statement"]
  110 -> 67 [style=dashed label="compound_statement"]
  110 -> 70 [style=dashed label="expression_statement"]
  110 -> 71 [style=dashed label="selection_statement"]
  110 -> 72 [style=dashed label="iteration_statement"]
  110 -> 73 [style=dashed label="jump_statement"]
  111 [label="State 111\n\l 69 compound_statement: '{' statement_list '}' .\l"]
  111 -> "111R69" [style=solid]
 "111R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 75 statement_list: statement_list statement .\l"]
  112 -> "112R75" [style=solid]
 "112R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 62 parameter_declaration: declaration_specifiers declarator .\l"]
  113 -> "113R62" [style=solid]
 "113R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 58 direct_declarator: direct_declarator '(' parameter_list ')' .\l"]
  114 -> "114R58" [style=solid]
 "114R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 61 parameter_list: parameter_list ',' . parameter_declaration\l"]
  115 -> 1 [style=solid label="EXTERN"]
  115 -> 2 [style=solid label="INT"]
  115 -> 3 [style=solid label="VOID"]
  115 -> 4 [style=solid label="STRUCT"]
  115 -> 75 [style=dashed label="declaration_specifiers"]
  115 -> 7 [style=dashed label="type_specifier"]
  115 -> 13 [style=dashed label="struct_specifier"]
  115 -> 145 [style=dashed label="parameter_declaration"]
  116 [label="State 116\n\l 14 unary_expression: SIZEOF '(' expression . ')'\l"]
  116 -> 146 [style=solid label="')'"]
  117 [label="State 117\n\l 13 unary_expression: SIZEOF '(' type_specifier . ')'\l"]
  117 -> 147 [style=solid label="')'"]
  118 [label="State 118\n\l 78 selection_statement: IF '(' expression . ')' statement\l 79                    | IF '(' expression . ')' statement ELSE statement\l"]
  118 -> 148 [style=solid label="')'"]
  119 [label="State 119\n\l 80 iteration_statement: WHILE '(' expression . ')' statement\l"]
  119 -> 149 [style=solid label="')'"]
  120 [label="State 120\n\l 81 iteration_statement: FOR '(' expression_statement . expression_statement expression ')' statement\l"]
  120 -> 39 [style=solid label="IDENTIFIER"]
  120 -> 40 [style=solid label="CONSTANT"]
  120 -> 41 [style=solid label="SIZEOF"]
  120 -> 46 [style=solid label="'('"]
  120 -> 47 [style=solid label="'&'"]
  120 -> 48 [style=solid label="'*'"]
  120 -> 49 [style=solid label="'-'"]
  120 -> 50 [style=solid label="';'"]
  120 -> 52 [style=dashed label="primary_expression"]
  120 -> 53 [style=dashed label="postfix_expression"]
  120 -> 54 [style=dashed label="unary_expression"]
  120 -> 55 [style=dashed label="unary_operator"]
  120 -> 56 [style=dashed label="multiplicative_expression"]
  120 -> 57 [style=dashed label="additive_expression"]
  120 -> 58 [style=dashed label="relational_expression"]
  120 -> 59 [style=dashed label="equality_expression"]
  120 -> 60 [style=dashed label="logical_and_expression"]
  120 -> 61 [style=dashed label="logical_or_expression"]
  120 -> 62 [style=dashed label="binary_expression"]
  120 -> 63 [style=dashed label="expression"]
  120 -> 150 [style=dashed label="expression_statement"]
  121 [label="State 121\n\l 83 jump_statement: RETURN expression ';' .\l"]
  121 -> "121R83" [style=solid]
 "121R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l  3 primary_expression: '(' expression ')' .\l"]
  122 -> "122R3" [style=solid]
 "122R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  123 [label="State 123\n\l  8 postfix_expression: postfix_expression PTR_OP IDENTIFIER .\l"]
  123 -> "123R8" [style=solid]
 "123R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  124 [label="State 124\n\l  5 postfix_expression: postfix_expression '(' ')' .\l"]
  124 -> "124R5" [style=solid]
 "124R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  125 [label="State 125\n\l  6 postfix_expression: postfix_expression '(' argument_expression_list . ')'\l 10 argument_expression_list: argument_expression_list . ',' expression\l"]
  125 -> 151 [style=solid label="')'"]
  125 -> 152 [style=solid label="','"]
  126 [label="State 126\n\l  9 argument_expression_list: expression .\l"]
  126 -> "126R9" [style=solid]
 "126R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  127 [label="State 127\n\l  7 postfix_expression: postfix_expression '.' IDENTIFIER .\l"]
  127 -> "127R7" [style=solid]
 "127R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l 39 expression: unary_expression '=' expression .\l"]
  128 -> "128R39" [style=solid]
 "128R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l 19 multiplicative_expression: multiplicative_expression '*' unary_expression .\l"]
  129 -> "129R19" [style=solid]
 "129R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 20 multiplicative_expression: multiplicative_expression '/' unary_expression .\l"]
  130 -> "130R20" [style=solid]
 "130R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l 18 multiplicative_expression: unary_expression .\l"]
  131 -> "131R18" [style=solid]
 "131R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 19 multiplicative_expression: multiplicative_expression . '*' unary_expression\l 20                          | multiplicative_expression . '/' unary_expression\l 23 additive_expression: additive_expression '-' multiplicative_expression .\l"]
  132 -> 92 [style=solid label="'*'"]
  132 -> 93 [style=solid label="'/'"]
  132 -> "132R23" [style=solid]
 "132R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l 19 multiplicative_expression: multiplicative_expression . '*' unary_expression\l 20                          | multiplicative_expression . '/' unary_expression\l 22 additive_expression: additive_expression '+' multiplicative_expression .\l"]
  133 -> 92 [style=solid label="'*'"]
  133 -> 93 [style=solid label="'/'"]
  133 -> "133R22" [style=solid]
 "133R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 22 additive_expression: additive_expression . '+' multiplicative_expression\l 23                    | additive_expression . '-' multiplicative_expression\l 27 relational_expression: relational_expression LE_OP additive_expression .\l"]
  134 -> 94 [style=solid label="'-'"]
  134 -> 95 [style=solid label="'+'"]
  134 -> "134R27" [style=solid]
 "134R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 22 additive_expression: additive_expression . '+' multiplicative_expression\l 23                    | additive_expression . '-' multiplicative_expression\l 28 relational_expression: relational_expression GE_OP additive_expression .\l"]
  135 -> 94 [style=solid label="'-'"]
  135 -> 95 [style=solid label="'+'"]
  135 -> "135R28" [style=solid]
 "135R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  136 [label="State 136\n\l 22 additive_expression: additive_expression . '+' multiplicative_expression\l 23                    | additive_expression . '-' multiplicative_expression\l 25 relational_expression: relational_expression L_OP additive_expression .\l"]
  136 -> 94 [style=solid label="'-'"]
  136 -> 95 [style=solid label="'+'"]
  136 -> "136R25" [style=solid]
 "136R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 22 additive_expression: additive_expression . '+' multiplicative_expression\l 23                    | additive_expression . '-' multiplicative_expression\l 26 relational_expression: relational_expression G_OP additive_expression .\l"]
  137 -> 94 [style=solid label="'-'"]
  137 -> 95 [style=solid label="'+'"]
  137 -> "137R26" [style=solid]
 "137R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  138 [label="State 138\n\l 25 relational_expression: relational_expression . L_OP additive_expression\l 26                      | relational_expression . G_OP additive_expression\l 27                      | relational_expression . LE_OP additive_expression\l 28                      | relational_expression . GE_OP additive_expression\l 30 equality_expression: equality_expression EQ_OP relational_expression .\l"]
  138 -> 96 [style=solid label="LE_OP"]
  138 -> 97 [style=solid label="GE_OP"]
  138 -> 98 [style=solid label="L_OP"]
  138 -> 99 [style=solid label="G_OP"]
  138 -> "138R30" [style=solid]
 "138R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l 25 relational_expression: relational_expression . L_OP additive_expression\l 26                      | relational_expression . G_OP additive_expression\l 27                      | relational_expression . LE_OP additive_expression\l 28                      | relational_expression . GE_OP additive_expression\l 31 equality_expression: equality_expression NE_OP relational_expression .\l"]
  139 -> 96 [style=solid label="LE_OP"]
  139 -> 97 [style=solid label="GE_OP"]
  139 -> 98 [style=solid label="L_OP"]
  139 -> 99 [style=solid label="G_OP"]
  139 -> "139R31" [style=solid]
 "139R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  140 [label="State 140\n\l 30 equality_expression: equality_expression . EQ_OP relational_expression\l 31                    | equality_expression . NE_OP relational_expression\l 33 logical_and_expression: logical_and_expression AND_OP equality_expression .\l"]
  140 -> 100 [style=solid label="EQ_OP"]
  140 -> 101 [style=solid label="NE_OP"]
  140 -> "140R33" [style=solid]
 "140R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l 35 logical_or_expression: logical_or_expression . OR_OP logical_and_expression\l 36 binary_expression: logical_or_expression RB_OP logical_or_expression .\l"]
  141 -> 105 [style=solid label="OR_OP"]
  141 -> "141R36" [style=solid]
 "141R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l 35 logical_or_expression: logical_or_expression . OR_OP logical_and_expression\l 37 binary_expression: logical_or_expression LB_OP logical_or_expression .\l"]
  142 -> 105 [style=solid label="OR_OP"]
  142 -> "142R37" [style=solid]
 "142R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  143 [label="State 143\n\l 33 logical_and_expression: logical_and_expression . AND_OP equality_expression\l 35 logical_or_expression: logical_or_expression OR_OP logical_and_expression .\l"]
  143 -> 102 [style=solid label="AND_OP"]
  143 -> "143R35" [style=solid]
 "143R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  144 [label="State 144\n\l 71 compound_statement: '{' declaration_list statement_list '}' .\l"]
  144 -> "144R71" [style=solid]
 "144R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l 61 parameter_list: parameter_list ',' parameter_declaration .\l"]
  145 -> "145R61" [style=solid]
 "145R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l 14 unary_expression: SIZEOF '(' expression ')' .\l"]
  146 -> "146R14" [style=solid]
 "146R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  147 [label="State 147\n\l 13 unary_expression: SIZEOF '(' type_specifier ')' .\l"]
  147 -> "147R13" [style=solid]
 "147R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  148 [label="State 148\n\l 78 selection_statement: IF '(' expression ')' . statement\l 79                    | IF '(' expression ')' . statement ELSE statement\l"]
  148 -> 39 [style=solid label="IDENTIFIER"]
  148 -> 40 [style=solid label="CONSTANT"]
  148 -> 41 [style=solid label="SIZEOF"]
  148 -> 42 [style=solid label="IF"]
  148 -> 43 [style=solid label="WHILE"]
  148 -> 44 [style=solid label="FOR"]
  148 -> 45 [style=solid label="RETURN"]
  148 -> 46 [style=solid label="'('"]
  148 -> 47 [style=solid label="'&'"]
  148 -> 48 [style=solid label="'*'"]
  148 -> 49 [style=solid label="'-'"]
  148 -> 50 [style=solid label="';'"]
  148 -> 31 [style=solid label="'{'"]
  148 -> 52 [style=dashed label="primary_expression"]
  148 -> 53 [style=dashed label="postfix_expression"]
  148 -> 54 [style=dashed label="unary_expression"]
  148 -> 55 [style=dashed label="unary_operator"]
  148 -> 56 [style=dashed label="multiplicative_expression"]
  148 -> 57 [style=dashed label="additive_expression"]
  148 -> 58 [style=dashed label="relational_expression"]
  148 -> 59 [style=dashed label="equality_expression"]
  148 -> 60 [style=dashed label="logical_and_expression"]
  148 -> 61 [style=dashed label="logical_or_expression"]
  148 -> 62 [style=dashed label="binary_expression"]
  148 -> 63 [style=dashed label="expression"]
  148 -> 153 [style=dashed label="statement"]
  148 -> 67 [style=dashed label="compound_statement"]
  148 -> 70 [style=dashed label="expression_statement"]
  148 -> 71 [style=dashed label="selection_statement"]
  148 -> 72 [style=dashed label="iteration_statement"]
  148 -> 73 [style=dashed label="jump_statement"]
  149 [label="State 149\n\l 80 iteration_statement: WHILE '(' expression ')' . statement\l"]
  149 -> 39 [style=solid label="IDENTIFIER"]
  149 -> 40 [style=solid label="CONSTANT"]
  149 -> 41 [style=solid label="SIZEOF"]
  149 -> 42 [style=solid label="IF"]
  149 -> 43 [style=solid label="WHILE"]
  149 -> 44 [style=solid label="FOR"]
  149 -> 45 [style=solid label="RETURN"]
  149 -> 46 [style=solid label="'('"]
  149 -> 47 [style=solid label="'&'"]
  149 -> 48 [style=solid label="'*'"]
  149 -> 49 [style=solid label="'-'"]
  149 -> 50 [style=solid label="';'"]
  149 -> 31 [style=solid label="'{'"]
  149 -> 52 [style=dashed label="primary_expression"]
  149 -> 53 [style=dashed label="postfix_expression"]
  149 -> 54 [style=dashed label="unary_expression"]
  149 -> 55 [style=dashed label="unary_operator"]
  149 -> 56 [style=dashed label="multiplicative_expression"]
  149 -> 57 [style=dashed label="additive_expression"]
  149 -> 58 [style=dashed label="relational_expression"]
  149 -> 59 [style=dashed label="equality_expression"]
  149 -> 60 [style=dashed label="logical_and_expression"]
  149 -> 61 [style=dashed label="logical_or_expression"]
  149 -> 62 [style=dashed label="binary_expression"]
  149 -> 63 [style=dashed label="expression"]
  149 -> 154 [style=dashed label="statement"]
  149 -> 67 [style=dashed label="compound_statement"]
  149 -> 70 [style=dashed label="expression_statement"]
  149 -> 71 [style=dashed label="selection_statement"]
  149 -> 72 [style=dashed label="iteration_statement"]
  149 -> 73 [style=dashed label="jump_statement"]
  150 [label="State 150\n\l 81 iteration_statement: FOR '(' expression_statement expression_statement . expression ')' statement\l"]
  150 -> 39 [style=solid label="IDENTIFIER"]
  150 -> 40 [style=solid label="CONSTANT"]
  150 -> 41 [style=solid label="SIZEOF"]
  150 -> 46 [style=solid label="'('"]
  150 -> 47 [style=solid label="'&'"]
  150 -> 48 [style=solid label="'*'"]
  150 -> 49 [style=solid label="'-'"]
  150 -> 52 [style=dashed label="primary_expression"]
  150 -> 53 [style=dashed label="postfix_expression"]
  150 -> 54 [style=dashed label="unary_expression"]
  150 -> 55 [style=dashed label="unary_operator"]
  150 -> 56 [style=dashed label="multiplicative_expression"]
  150 -> 57 [style=dashed label="additive_expression"]
  150 -> 58 [style=dashed label="relational_expression"]
  150 -> 59 [style=dashed label="equality_expression"]
  150 -> 60 [style=dashed label="logical_and_expression"]
  150 -> 61 [style=dashed label="logical_or_expression"]
  150 -> 62 [style=dashed label="binary_expression"]
  150 -> 155 [style=dashed label="expression"]
  151 [label="State 151\n\l  6 postfix_expression: postfix_expression '(' argument_expression_list ')' .\l"]
  151 -> "151R6" [style=solid]
 "151R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l 10 argument_expression_list: argument_expression_list ',' . expression\l"]
  152 -> 39 [style=solid label="IDENTIFIER"]
  152 -> 40 [style=solid label="CONSTANT"]
  152 -> 41 [style=solid label="SIZEOF"]
  152 -> 46 [style=solid label="'('"]
  152 -> 47 [style=solid label="'&'"]
  152 -> 48 [style=solid label="'*'"]
  152 -> 49 [style=solid label="'-'"]
  152 -> 52 [style=dashed label="primary_expression"]
  152 -> 53 [style=dashed label="postfix_expression"]
  152 -> 54 [style=dashed label="unary_expression"]
  152 -> 55 [style=dashed label="unary_operator"]
  152 -> 56 [style=dashed label="multiplicative_expression"]
  152 -> 57 [style=dashed label="additive_expression"]
  152 -> 58 [style=dashed label="relational_expression"]
  152 -> 59 [style=dashed label="equality_expression"]
  152 -> 60 [style=dashed label="logical_and_expression"]
  152 -> 61 [style=dashed label="logical_or_expression"]
  152 -> 62 [style=dashed label="binary_expression"]
  152 -> 156 [style=dashed label="expression"]
  153 [label="State 153\n\l 78 selection_statement: IF '(' expression ')' statement .\l 79                    | IF '(' expression ')' statement . ELSE statement\l"]
  153 -> 157 [style=solid label="ELSE"]
  153 -> "153R78d" [label="[ELSE]", style=solid]
 "153R78d" [label="R78", fillcolor=5, shape=diamond, style=filled]
  153 -> "153R78" [style=solid]
 "153R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l 80 iteration_statement: WHILE '(' expression ')' statement .\l"]
  154 -> "154R80" [style=solid]
 "154R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l 81 iteration_statement: FOR '(' expression_statement expression_statement expression . ')' statement\l"]
  155 -> 158 [style=solid label="')'"]
  156 [label="State 156\n\l 10 argument_expression_list: argument_expression_list ',' expression .\l"]
  156 -> "156R10" [style=solid]
 "156R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l 79 selection_statement: IF '(' expression ')' statement ELSE . statement\l"]
  157 -> 39 [style=solid label="IDENTIFIER"]
  157 -> 40 [style=solid label="CONSTANT"]
  157 -> 41 [style=solid label="SIZEOF"]
  157 -> 42 [style=solid label="IF"]
  157 -> 43 [style=solid label="WHILE"]
  157 -> 44 [style=solid label="FOR"]
  157 -> 45 [style=solid label="RETURN"]
  157 -> 46 [style=solid label="'('"]
  157 -> 47 [style=solid label="'&'"]
  157 -> 48 [style=solid label="'*'"]
  157 -> 49 [style=solid label="'-'"]
  157 -> 50 [style=solid label="';'"]
  157 -> 31 [style=solid label="'{'"]
  157 -> 52 [style=dashed label="primary_expression"]
  157 -> 53 [style=dashed label="postfix_expression"]
  157 -> 54 [style=dashed label="unary_expression"]
  157 -> 55 [style=dashed label="unary_operator"]
  157 -> 56 [style=dashed label="multiplicative_expression"]
  157 -> 57 [style=dashed label="additive_expression"]
  157 -> 58 [style=dashed label="relational_expression"]
  157 -> 59 [style=dashed label="equality_expression"]
  157 -> 60 [style=dashed label="logical_and_expression"]
  157 -> 61 [style=dashed label="logical_or_expression"]
  157 -> 62 [style=dashed label="binary_expression"]
  157 -> 63 [style=dashed label="expression"]
  157 -> 159 [style=dashed label="statement"]
  157 -> 67 [style=dashed label="compound_statement"]
  157 -> 70 [style=dashed label="expression_statement"]
  157 -> 71 [style=dashed label="selection_statement"]
  157 -> 72 [style=dashed label="iteration_statement"]
  157 -> 73 [style=dashed label="jump_statement"]
  158 [label="State 158\n\l 81 iteration_statement: FOR '(' expression_statement expression_statement expression ')' . statement\l"]
  158 -> 39 [style=solid label="IDENTIFIER"]
  158 -> 40 [style=solid label="CONSTANT"]
  158 -> 41 [style=solid label="SIZEOF"]
  158 -> 42 [style=solid label="IF"]
  158 -> 43 [style=solid label="WHILE"]
  158 -> 44 [style=solid label="FOR"]
  158 -> 45 [style=solid label="RETURN"]
  158 -> 46 [style=solid label="'('"]
  158 -> 47 [style=solid label="'&'"]
  158 -> 48 [style=solid label="'*'"]
  158 -> 49 [style=solid label="'-'"]
  158 -> 50 [style=solid label="';'"]
  158 -> 31 [style=solid label="'{'"]
  158 -> 52 [style=dashed label="primary_expression"]
  158 -> 53 [style=dashed label="postfix_expression"]
  158 -> 54 [style=dashed label="unary_expression"]
  158 -> 55 [style=dashed label="unary_operator"]
  158 -> 56 [style=dashed label="multiplicative_expression"]
  158 -> 57 [style=dashed label="additive_expression"]
  158 -> 58 [style=dashed label="relational_expression"]
  158 -> 59 [style=dashed label="equality_expression"]
  158 -> 60 [style=dashed label="logical_and_expression"]
  158 -> 61 [style=dashed label="logical_or_expression"]
  158 -> 62 [style=dashed label="binary_expression"]
  158 -> 63 [style=dashed label="expression"]
  158 -> 160 [style=dashed label="statement"]
  158 -> 67 [style=dashed label="compound_statement"]
  158 -> 70 [style=dashed label="expression_statement"]
  158 -> 71 [style=dashed label="selection_statement"]
  158 -> 72 [style=dashed label="iteration_statement"]
  158 -> 73 [style=dashed label="jump_statement"]
  159 [label="State 159\n\l 79 selection_statement: IF '(' expression ')' statement ELSE statement .\l"]
  159 -> "159R79" [style=solid]
 "159R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l 81 iteration_statement: FOR '(' expression_statement expression_statement expression ')' statement .\l"]
  160 -> "160R81" [style=solid]
 "160R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
}
